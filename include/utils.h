#include <cmath>
#include <utility>
#include "Math/Vector3D.h" // XYZVector

using XYZ = ROOT::Math::XYZVector;

std::pair<float,float> calculate_angles_to_beamline(float x, float y, float z) {
  /*
    Simple trigonometric relationship.
    Calculates the angle between: 
    - a line with point (x,y,z) passing through the origin (0,0,0)
    - the beam line
    This is correct only if:
    1) the beamline aligns with the z direction.
    2) both lines pass through the origin
    A more generic function is required for other cases.
   */
  std::pair<float,float> p;
  p.first = std::atan( y / z ); //z vs y
  p.second = std::atan( x / z ); //z vs x
  return p;
}

XYZ rotate_coordinates(XYZ p, float theta, float phi) {
  using namespace std;
  XYZ res( cos(phi)*p.X() + sin(phi)*p.Z(),
	   sin(theta)*sin(phi)*p.X() + cos(theta)*p.Y() - sin(theta)*cos(phi)*p.Z(),
	   -sin(phi)*cos(theta)*p.X() + sin(theta)*p.Y() + cos(theta)*cos(phi)*p.Z() );
  return res;
}

/*
Translate point 'p' relative to a new origin 'origin'.
Translating a point by itself returns (0,0,0), i.e., it is the origin.
*/
XYZ translate_coordinates(XYZ p, XYZ origin) {
  XYZ res( p.X() - origin.X(),
	   p.Y() - origin.Y(),
	   p.Z() - origin.Z() );
  return res;
}

XYZ intersect_plane_with_line(XYZ genpoint1, XYZ genpoint2,
			      XYZ intersectpoint1, XYZ intersectpoint2,
			      XYZ planepoint) {
  /*Calculate the intersection between a line, generated from 'intersectpoint1'
    and 'intersectpoint2', and a plane, perpendicular to the line generated by 
    'genpoint1' and 'genpoint2' and containing 'planepoint'.
  */

  //vector along the line perpendicular to the plane (normal to the plane)
  XYZ n = genpoint2-genpoint1;
  //vector along the intersection line
  XYZ l = intersectpoint2-intersectpoint1;
  
  //(l cross n)*d + (intersectlinepoint-planepoint) cross n = 0
  //bot intersectline1 or intersectline2 can be used
  //https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection
  float d = ( (planepoint - intersectpoint1).Dot(n) );
  d /= ( l.Dot(n) );

  //point of intersection
  XYZ intersection = intersectpoint1 + l*d;
  return intersection;
}

float get_y_in_line(float x, float x1, float y1, float x2, float y2) {
  /*
    Calculates the y coordinate of a point in a line defined by two points,
    given the x coordinate.
  */
  float slope = std::abs(y2-y1) / std::abs(x2-x1);
  return slope*(x-x1) + y1;
}
